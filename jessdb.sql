----------------------------------------------------------------
-- 0) 安全清理（可反复执行）
----------------------------------------------------------------
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE order_items CASCADE CONSTRAINTS PURGE';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE orders CASCADE CONSTRAINTS PURGE';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE member_customers CASCADE CONSTRAINTS PURGE';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE product CASCADE CONSTRAINTS PURGE';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE category CASCADE CONSTRAINTS PURGE';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE customer CASCADE CONSTRAINTS PURGE';
EXCEPTION WHEN OTHERS THEN NULL; END;
/

----------------------------------------------------------------
-- 1) 基础表
----------------------------------------------------------------
CREATE TABLE customer (
  customer_id     NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name            VARCHAR2(100)   NOT NULL,
  phone           VARCHAR2(30),
  email           VARCHAR2(120),
  address         VARCHAR2(255),
  customer_type   VARCHAR2(10)    NOT NULL
    CHECK (customer_type IN ('MEMBER','GUEST'))
);

CREATE TABLE category (
  category_id     NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  category_name   VARCHAR2(80) NOT NULL UNIQUE,
  description     VARCHAR2(255)
);

CREATE TABLE product (
  product_id      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name            VARCHAR2(120)  NOT NULL,
  price           NUMBER(10,2)   NOT NULL CHECK (price >= 0),
  is_active       CHAR(1)        DEFAULT 'Y' NOT NULL CHECK (is_active IN ('Y','N')),
  category_id     NUMBER         NOT NULL,
  CONSTRAINT fk_product_category
    FOREIGN KEY (category_id) REFERENCES category(category_id)
);

CREATE TABLE member_customers (
  customer_id        NUMBER       PRIMARY KEY,
  password_hash      VARCHAR2(255),
  date_of_birth      DATE,
  registration_date  TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
  CONSTRAINT fk_member_customer
    FOREIGN KEY (customer_id) REFERENCES customer(customer_id) ON DELETE CASCADE
);

CREATE TABLE orders (
  order_id        NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  customer_id     NUMBER NOT NULL,
  order_date      TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
  status          VARCHAR2(20) NOT NULL,
  payment_method  VARCHAR2(20) NOT NULL,
  total_amount    NUMBER(12,2) DEFAULT 0 NOT NULL CHECK (total_amount >= 0),
  CONSTRAINT fk_orders_customer
    FOREIGN KEY (customer_id) REFERENCES customer(customer_id)
);

CREATE TABLE order_items (
  order_item_id   NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  order_id        NUMBER NOT NULL,
  product_id      NUMBER NOT NULL,
  quantity        NUMBER(10) NOT NULL CHECK (quantity > 0),
  unit_price      NUMBER(10,2) NOT NULL CHECK (unit_price >= 0),
  -- 虚拟列便于对账
  line_amount     GENERATED ALWAYS AS (quantity * unit_price) VIRTUAL,
  CONSTRAINT fk_oi_order
    FOREIGN KEY (order_id)  REFERENCES orders(order_id) ON DELETE CASCADE,
  CONSTRAINT fk_oi_product
    FOREIGN KEY (product_id) REFERENCES product(product_id)
);

----------------------------------------------------------------
-- 2) orders 的 CHECK（统一大写 + UPPER() 兜底）
----------------------------------------------------------------
ALTER TABLE orders ADD CONSTRAINT chk_orders_status_uc
  CHECK (UPPER(status) IN ('PLACED','COMPLETED','CANCELLED','REFUNDED'));

ALTER TABLE orders ADD CONSTRAINT chk_orders_pay_method_uc
  CHECK (UPPER(payment_method) IN ('CASH','CREDIT CARD','ALIPAY','WECHAT'));

----------------------------------------------------------------
-- 3) 业务触发器（与原逻辑一致，加入更清晰的异常）
----------------------------------------------------------------
-- A) 在 member_customers 插入/更新时，父表类型必须是 MEMBER
CREATE OR REPLACE TRIGGER trg_mc_insupd
BEFORE INSERT OR UPDATE ON member_customers
FOR EACH ROW
DECLARE
  v_type customer.customer_type%TYPE;
BEGIN
  SELECT customer_type INTO v_type
    FROM customer WHERE customer_id = :NEW.customer_id;
  IF v_type <> 'MEMBER' THEN
     RAISE_APPLICATION_ERROR(-20001, 'CustomerType must be MEMBER to have member_customers row.');
  END IF;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
     RAISE_APPLICATION_ERROR(-20003, 'Customer does not exist for given customer_id.');
END;
/
-- B) 父表改类型时，若已有子表记录，不允许改为 GUEST
CREATE OR REPLACE TRIGGER trg_customer_type_guard
BEFORE UPDATE OF customer_type ON customer
FOR EACH ROW
DECLARE
  v_cnt NUMBER;
BEGIN
  IF :NEW.customer_type = 'GUEST' THEN
    SELECT COUNT(*) INTO v_cnt
      FROM member_customers
     WHERE customer_id = :OLD.customer_id;
    IF v_cnt > 0 THEN
      RAISE_APPLICATION_ERROR(-20002, 'Cannot change to GUEST while member record exists.');
    END IF;
  END IF;
END;
/

----------------------------------------------------------------
-- 4) （可选）会员邮箱大小写不敏感唯一
-- 若需要：保证只有当 customer_type='MEMBER' 时，LOWER(email) 唯一
----------------------------------------------------------------
-- CREATE UNIQUE INDEX ux_customer_member_email_ci
--   ON customer (CASE WHEN customer_type='MEMBER' THEN LOWER(email) END);

----------------------------------------------------------------
-- 5) 演示数据
----------------------------------------------------------------
-- 类别
INSERT INTO category(category_name, description) VALUES ('Coffee','Various types of coffee drinks');
INSERT INTO category(category_name, description) VALUES ('Tea','Traditional and specialty teas');
INSERT INTO category(category_name, description) VALUES ('Bakery','Fresh pastries and desserts');
COMMIT;

-- 商品
INSERT INTO product(name, price, is_active, category_id)
SELECT 'Americano', 30, 'Y', category_id FROM category WHERE category_name='Coffee';
INSERT INTO product(name, price, is_active, category_id)
SELECT 'Latte',     35, 'Y', category_id FROM category WHERE category_name='Coffee';
INSERT INTO product(name, price, is_active, category_id)
SELECT 'Green Tea', 25, 'Y', category_id FROM category WHERE category_name='Tea';
INSERT INTO product(name, price, is_active, category_id)
SELECT 'Chocolate Cake', 45, 'Y', category_id FROM category WHERE category_name='Bakery';
COMMIT;

-- 客户：2 会员 + 2 游客
DECLARE v_cust_id NUMBER;
BEGIN
  INSERT INTO customer (name, phone, email, address, customer_type)
  VALUES ('Wei Zhang', '+85212345678', 'wei.zhang@email.com', NULL, 'MEMBER')
  RETURNING customer_id INTO v_cust_id;

  INSERT INTO member_customers (customer_id, password_hash, date_of_birth)
  VALUES (v_cust_id, 'hashed_password_1', DATE '1990-01-15');
END;
/
DECLARE v_cust_id NUMBER;
BEGIN
  INSERT INTO customer (name, phone, email, address, customer_type)
  VALUES ('Mei Li', '+85287654321', 'mei.li@email.com', NULL, 'MEMBER')
  RETURNING customer_id INTO v_cust_id;

  INSERT INTO member_customers (customer_id, password_hash, date_of_birth)
  VALUES (v_cust_id, 'hashed_password_2', DATE '1985-08-22');
END;
/
INSERT INTO customer (name, phone, email, address, customer_type)
VALUES ('San Zhang', '+85255556666', NULL, NULL, 'GUEST');

INSERT INTO customer (name, phone, email, address, customer_type)
VALUES ('Si Li', '+85299998888', NULL, NULL, 'GUEST');
COMMIT;

----------------------------------------------------------------
-- 6) 订单示例（演示 UPPER 值域）
----------------------------------------------------------------
-- 注意：即使应用层传入大小写混合，CHECK 仍会通过，因为约束里用 UPPER()
INSERT INTO orders (customer_id, status, payment_method, total_amount)
SELECT customer_id, 'placed', 'Credit Card', 65
  FROM customer WHERE name='Wei Zhang';

INSERT INTO orders (customer_id, status, payment_method, total_amount)
SELECT customer_id, 'COMPLETED', 'ALIPAY', 45
  FROM customer WHERE name='Mei Li';
COMMIT;

-- 订单明细
INSERT INTO order_items (order_id, product_id, quantity, unit_price)
SELECT o.order_id, p.product_id, 1, p.price
  FROM orders o
  JOIN product p ON p.name='Americano'
 WHERE o.total_amount>=0
 FETCH FIRST 1 ROWS ONLY;

INSERT INTO order_items (order_id, product_id, quantity, unit_price)
SELECT o.order_id, p.product_id, 2, p.price
  FROM orders o
  JOIN product p ON p.name='Latte'
 WHERE o.total_amount>=0
 OFFSET 1 ROWS FETCH NEXT 1 ROWS ONLY;
COMMIT;

----------------------------------------------------------------
-- 7) 校验查询
----------------------------------------------------------------
-- 会员 / 非会员人数
SELECT customer_type, COUNT(*) cnt
FROM customer
GROUP BY customer_type;

-- 检查所有 MEMBER 是否都在子表有记录（应为 0）
SELECT COUNT(*) AS member_without_child
FROM customer c
LEFT JOIN member_customers m ON m.customer_id = c.customer_id
WHERE c.customer_type = 'MEMBER' AND m.customer_id IS NULL;

-- 查看客户 + 会员注册时间（email 来自父表）
SELECT c.customer_id, c.name, c.customer_type, c.phone, c.email, m.registration_date
FROM customer c
LEFT JOIN member_customers m ON m.customer_id = c.customer_id
ORDER BY c.customer_id;

-- 检查订单的状态与支付方式（应全部转为大写后在允许集合内）
SELECT order_id, status, payment_method, total_amount
FROM orders
ORDER BY order_id;

-- 明细合计校验（示例）
SELECT oi.order_id,
       SUM(oi.line_amount) AS detail_sum,
       (SELECT total_amount FROM orders o WHERE o.order_id=oi.order_id) AS order_total
FROM order_items oi
GROUP BY oi.order_id;


MERGE INTO category c
USING (SELECT 'Smoothies' AS nm, 'Fruit and yogurt smoothies' AS ds FROM dual UNION ALL
       SELECT 'Sandwiches', 'Freshly made sandwiches' FROM dual UNION ALL
       SELECT 'Seasonal',   'Limited-time seasonal specials' FROM dual UNION ALL
       SELECT 'Cold Brew',  'Cold brew coffee selection' FROM dual) s
ON (c.category_name = s.nm)
WHEN NOT MATCHED THEN
  INSERT (category_name, description) VALUES (s.nm, s.ds);
  
-- 商品（每类 2–3 个）
INSERT INTO product (name, price, is_active, category_id)
SELECT 'Strawberry Smoothie', 38, 'Y', category_id FROM category WHERE category_name='Smoothies';
INSERT INTO product (name, price, is_active, category_id)
SELECT 'Mango Smoothie',     40, 'Y', category_id FROM category WHERE category_name='Smoothies';

INSERT INTO product (name, price, is_active, category_id)
SELECT 'Chicken Sandwich',   42, 'Y', category_id FROM category WHERE category_name='Sandwiches';
INSERT INTO product (name, price, is_active, category_id)
SELECT 'Tuna Sandwich',      39, 'Y', category_id FROM category WHERE category_name='Sandwiches';

INSERT INTO product (name, price, is_active, category_id)
SELECT 'Pumpkin Spice Latte', 48, 'Y', category_id FROM category WHERE category_name='Seasonal';
INSERT INTO product (name, price, is_active, category_id)
SELECT 'Gingerbread Latte',   50, 'Y', category_id FROM category WHERE category_name='Seasonal';

INSERT INTO product (name, price, is_active, category_id)
SELECT 'Classic Cold Brew',   36, 'Y', category_id FROM category WHERE category_name='Cold Brew';
INSERT INTO product (name, price, is_active, category_id)
SELECT 'Nitro Cold Brew',     42, 'Y', category_id FROM category WHERE category_name='Cold Brew';

COMMIT;

-- 8 位会员（每位插入父表 + 子表）
DECLARE
  PROCEDURE add_member(p_name VARCHAR2, p_phone VARCHAR2, p_email VARCHAR2,
                       p_dob DATE, p_pwd VARCHAR2) IS
    v_id NUMBER;
  BEGIN
    INSERT INTO customer (name, phone, email, address, customer_type)
    VALUES (p_name, p_phone, p_email, NULL, 'MEMBER')
    RETURNING customer_id INTO v_id;

    INSERT INTO member_customers (customer_id, password_hash, date_of_birth)
    VALUES (v_id, p_pwd, p_dob);
  END;
BEGIN
  add_member('Li Wei',     '+85268001234', 'li.wei@email.com',      DATE '1992-02-09', 'pw_liwei');
  add_member('Chen Yang',  '+85268004567', 'chen.yang@email.com',   DATE '1995-11-23', 'pw_cy');
  add_member('Wang Yu',    '+85268007890', 'wang.yu@email.com',     DATE '1988-05-17', 'pw_wy');
  add_member('Zhao Ling',  '+85268001122', 'zhao.ling@email.com',   DATE '1993-07-02', 'pw_zl');
  add_member('Liu Mei',    '+85268003344', 'liu.mei@email.com',     DATE '1997-03-28', 'pw_lm');
  add_member('Zhang Qian', '+85268005566', 'zhang.qian@email.com',  DATE '1990-10-10', 'pw_zq');
  add_member('Sun Hao',    '+85268007788', 'sun.hao@email.com',     DATE '1986-12-30', 'pw_sh');
  add_member('Gao Nan',    '+85268009900', 'gao.nan@email.com',     DATE '1994-06-15', 'pw_gn');
END;
/

-- 4 位散客（无子表记录）
INSERT INTO customer (name, phone, email, address, customer_type)
VALUES ('Guest A', '+85270110001', NULL, NULL, 'GUEST');
INSERT INTO customer (name, phone, email, address, customer_type)
VALUES ('Guest B', '+85270110002', NULL, NULL, 'GUEST');
INSERT INTO customer (name, phone, email, address, customer_type)
VALUES ('Guest C', '+85270110003', NULL, NULL, 'GUEST');
INSERT INTO customer (name, phone, email, address, customer_type)
VALUES ('Guest D', '+85270110004', NULL, NULL, 'GUEST');

COMMIT;

-- （可选）固定随机种子，保证结果可复现
BEGIN DBMS_RANDOM.SEED(20251015); END;
/

DECLARE
  CURSOR c_members IS
    SELECT m.customer_id,
           CAST((SELECT MIN(o.order_date) FROM orders o WHERE o.customer_id=m.customer_id) AS TIMESTAMP) AS first_order_ts
      FROM member_customers m;

  v_min_ts   TIMESTAMP;
  v_max_ts   TIMESTAMP;
  v_choice_d DATE;
  v_choice_s NUMBER;
  v_reg_ts   TIMESTAMP;
BEGIN
  FOR r IN c_members LOOP
    -- 最近 30 天的默认窗口
    v_min_ts := SYSTIMESTAMP - INTERVAL '30' DAY;
    v_max_ts := SYSTIMESTAMP - INTERVAL '1' DAY;

    -- 若存在首单，注册时间不能晚于首单前一天
    IF r.first_order_ts IS NOT NULL THEN
      v_max_ts := LEAST(v_max_ts, r.first_order_ts - INTERVAL '1' DAY);
    END IF;

    IF v_max_ts <= v_min_ts THEN
      -- 最近 30 天窗口与“首单前一天”冲突：回退为“首单前一天”（或当前日前一天）
      v_reg_ts := NVL(r.first_order_ts - INTERVAL '1' DAY, SYSTIMESTAMP - INTERVAL '1' DAY);
    ELSE
      -- 在 [v_min_ts, v_max_ts] 区间内随机（按天+秒）
      v_choice_d := CAST(v_min_ts AS DATE)
                  + DBMS_RANDOM.VALUE(0, CAST(v_max_ts AS DATE) - CAST(v_min_ts AS DATE));
      v_choice_s := TRUNC(DBMS_RANDOM.VALUE(0, 24*60*60));
      v_reg_ts   := CAST(v_choice_d AS TIMESTAMP) + NUMTODSINTERVAL(v_choice_s, 'SECOND');
    END IF;

    UPDATE member_customers
       SET registration_date = v_reg_ts
     WHERE customer_id = r.customer_id;
  END LOOP;

  COMMIT;
END;
/
-- 快速抽查
SELECT c.name, m.registration_date,
       (SELECT MIN(order_date) FROM orders o WHERE o.customer_id=c.customer_id) AS first_order
FROM customer c JOIN member_customers m ON m.customer_id=c.customer_id
ORDER BY m.registration_date;
